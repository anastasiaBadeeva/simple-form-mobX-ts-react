{"version":3,"sources":["store/store.tsx","hooks/useInput.tsx","hooks/useValidation.tsx","components/Modal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["name","surname","makeAutoObservable","this","console","log","useInput","initialValue","validations","React","useState","value","setValue","isDirty","setIsDirty","valid","props","isEmpty","setIsEmpty","inputValid","setInputValid","useEffect","validation","useValidation","onBlur","onChange","e","target","Modal","active","setActive","children","className","onClick","App","observer","nameInput","surnameInput","store","addName","addSurname","placeholder","type","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae5fb1fa.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\"\r\n\r\nclass Store{\r\n    name : string  = ''\r\n    surname : string  = ''\r\n  constructor(){\r\n    makeAutoObservable(this);  \r\n  }\r\n  addName(name :string) {\r\n    this.name = name;\r\n    console.log(this.name)\r\n }\r\n addSurname(surname : string) {\r\n  this.surname = surname\r\n  console.log(this.surname)\r\n};\r\n};\r\nexport default new Store","import React from 'react'\r\nimport { useValidation } from './useValidation'\r\n\r\nexport const useInput = (initialValue :any ,validations :any) => {\r\n   const [value, setValue] = React.useState<string>(initialValue)\r\n   const [isDirty, setIsDirty] = React.useState(false)\r\n   const valid = useValidation( {value, validations})\r\n   const onChange = (e : React.ChangeEvent<HTMLInputElement>) =>{\r\n   setValue(e.target.value)\r\n   }\r\n\r\n   const onBlur = () =>{\r\n    setIsDirty(true)\r\n}\r\nreturn{\r\n    value,\r\n    onBlur,\r\n    onChange,\r\n    isDirty,\r\n   ...valid\r\n}\r\n}\r\n","import React from 'react'\r\n\r\nexport const useValidation = (props :any) => {\r\n    const { value, validations } = props\r\n    const [isEmpty, setIsEmpty] = React.useState(true)\r\n    const [inputValid, setInputValid] = React.useState(false)\r\n    React.useEffect(() => {\r\n        for (const validation in validations) {\r\n            switch (validation) {\r\n                case 'isEmpty':\r\n                    value ? setIsEmpty(false) : setIsEmpty(true)\r\n                    break;\r\n            }\r\n            \r\n        }\r\n        \r\n    }, [value]);\r\n    React.useEffect(() => {\r\n       if (isEmpty) {\r\n        setInputValid(false)\r\n       }\r\n       else{\r\n        setInputValid(true)\r\n       }\r\n    }, [isEmpty])\r\n    return{\r\n        isEmpty,inputValid\r\n    }\r\n}\r\n","import React from 'react'\r\nimport './Modal.scss';\r\ntype ModalProps = {\r\n    active: boolean \r\n    setActive: Function\r\n    children? :React.ReactNode\r\n  }\r\nexport const Modal: React.FC<ModalProps> = (props) => {\r\n    const { active, setActive, children } = props\r\n    return (\r\n        <div className={active ? \"modal active\" : \"modal\" }>\r\n            <div className=\"modal-content\">\r\n                {children}\r\n            <button className=\"modal-content-btn\" onClick={ () => setActive(false) }>Закрыть</button>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport { observer } from 'mobx-react-lite';\nimport store from './store/store'\nimport {useInput} from './hooks/useInput'\nimport { Modal } from './components/Modal';\n\nconst App  = observer(() => {\n  const [active, setActive] = React.useState<boolean>(false)\n  const nameInput :any = useInput('',{ isEmpty: true })\n  const surnameInput :any = useInput('',{isEmpty: true })\n \n  React.useEffect(() => {\n    store.addName(nameInput.value)\n  }, [nameInput.value])\n  React.useEffect(() => {\n    store.addSurname(surnameInput.value)\n  }, [surnameInput.value])\n \n  \n  return (\n\n    <div className=\"App\">\n      <div className=\"media\">\n      <div className=\"form\">\n      {(nameInput.isDirty && nameInput.isEmpty) && <div className=\"form-error\"> Поле не может быть пустым</div> }  \n      <input   placeholder=\"Имя\" name=\"name\"    type=\"text\" onBlur={() => nameInput.onBlur()} value={nameInput.value} onChange={(e) =>{ nameInput.onChange(e)}}></input>\n      {(surnameInput.isDirty && surnameInput.isEmpty) && <div className=\"form-error\"> Поле не может быть пустым</div> }  \n      <input  placeholder=\"Фамилия\" value={surnameInput.value} onChange={(e) => { surnameInput.onChange(e) }} onBlur={ () => surnameInput.onBlur()}></input>\n        <button disabled={!nameInput.inputValid || !surnameInput.inputValid} onClick={() => { setActive(true) }}>Готово</button>\n        </div>\n        </div>\n        <Modal active={active} setActive={setActive}>\n        <p>Здравствуйте {store.name + \" \" + store.surname}  </p>\n        </Modal>\n      </div>\n      \n\n  );\n})\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}